generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model address {
  id          Int      @id @default(autoincrement())
  personId    Int
  street      Int
  number      String   @db.VarChar(16)
  complement  String   @db.VarChar(255)
  district    String   @db.VarChar(255)
  city        String   @db.VarChar(255)
  zipCode     String   @db.VarChar(10)
  state       String   @db.VarChar(255)
  country     String   @db.VarChar(100)
  phone       String   @db.VarChar(36)
  phoneMobile String   @db.VarChar(36)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @db.DateTime(0)
  person      person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_address_person")

  @@index([personId], map: "FK_address_person")
}

model discount {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  description     String   @db.VarChar(255)
  discountPorcent Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @db.Timestamp(0)
}

model passwordrecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_recoveries_users")

  @@index([userId], map: "FK_password_recoveries_users")
}

model paymenttype {
  id             Int    @id @default(autoincrement())
  namePayment    String @db.VarChar(100)
  paymentTypecol String @db.VarChar(100)
}

model person {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(250)
  birthAt   DateTime  @db.Date
  phone     String    @db.VarChar(20)
  document  String    @db.VarChar(14)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  address   address[]
  user      user[]
}

model product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  image       String?  @db.VarChar(255)
  price       Decimal  @db.Decimal(10, 2)
  quantity    String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model productcategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model user {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar(255)
  password         String             @db.VarChar(255)
  photo            String?            @db.VarChar(255)
  personId         Int
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  person           person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_persons")
  passwordrecovery passwordrecovery[]

  @@index([personId], map: "FK_users_persons")
}
