generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model Discount {
  id              Int      @id @default(autoincrement())
  name            String   @db.VarChar(255)
  description     String   @db.VarChar(255)
  discountPorcent Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @db.Timestamp(0)

  @@map("discount")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  description String       @db.VarChar(255)
  image       String?      @db.VarChar(255)
  price       Decimal      @db.Decimal(10, 2)
  quantity    Decimal      @db.Decimal(10, 2)
  createdAt   DateTime     @default(now()) @db.Timestamp(0)
  updatedAt   DateTime     @default(now()) @db.Timestamp(0)
  cartitem    cartitem[]   @relation("cartitemToproduct")
  orderitems  orderitems[] @relation("orderitemsToproduct")

  @@map("product")
}

model paymenttype {
  id             Int              @id @default(autoincrement())
  namePayment    String           @db.VarChar(100)
  paymentTypecol String           @db.VarChar(100)
  paymentdetails paymentdetails[]
  userpayment    userpayment[]
}

model person {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(250)
  birthAt         DateTime?          @db.Date
  phone           String?            @db.VarChar(20)
  document        String?            @db.VarChar(14)
  createdAt       DateTime          @default(now()) @db.DateTime(0)
  updatedAt       DateTime          @default(now()) @db.DateTime(0)
  address         address[]
  contacts        contacts[]
  orderdetails    orderdetails[]
  shoppingsession shoppingsession[]
  user            user[]
  userpayment     userpayment[]
}

model productcategory {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @db.Timestamp(0)
}

model address {
  id          Int      @id @default(autoincrement())
  personId    Int
  street      String   @db.VarChar(255)
  number      String   @db.VarChar(16)
  complement  String   @db.VarChar(255)
  district    String   @db.VarChar(255)
  city        String   @db.VarChar(255)
  zipCode     String   @db.VarChar(10)
  state       String   @db.VarChar(255)
  country     String   @db.VarChar(100)
  phone       String   @db.VarChar(36)
  phoneMobile String   @db.VarChar(36)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @db.DateTime(0)
  person      person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_address_person")

  @@index([personId], map: "FK_address_person")
}

model user {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar(255)
  password         String             @db.VarChar(255)
  photo            String?            @db.VarChar(255)
  personId         Int
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  person           person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_Person")
  passwordrecovery passwordrecovery[]

  @@index([personId], map: "FK_users_Person")
}

model shoppingsession {
  id        Int        @id @default(autoincrement())
  personId  Int
  total     Decimal    @db.Decimal(10, 2)
  createdAt DateTime   @default(now()) @db.Timestamp(0)
  updatedAt DateTime   @default(now()) @db.Timestamp(0)
  person    person     @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_shoppingSession_Person")
  cartitem  cartitem[]

  @@index([personId], map: "FK_shoppingSession_Person")
}

model cartitem {
  id              Int             @id @default(autoincrement())
  sessionId       Int
  productId       Int
  quantity        Int
  createdAt       DateTime        @default(now()) @db.Timestamp(0)
  updatedAt       DateTime        @default(now()) @db.Timestamp(0)
  product         Product         @relation("cartitemToproduct", fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cartItem_Product")
  shoppingsession shoppingsession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_cartItem_ShoppingSession")

  @@index([productId], map: "FK_cartItem_Product")
  @@index([sessionId], map: "FK_cartItem_ShoppingSession")
}

model userpayment {
  id            Int         @id @default(autoincrement())
  personId      Int
  paymentTypeId Int
  createdAt     DateTime    @default(now()) @db.Timestamp(0)
  updatedAt     DateTime    @default(now()) @db.Timestamp(0)
  paymenttype   paymenttype @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_userPayment_PaymentType")
  person        person      @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_userPayment_Person")

  @@index([paymentTypeId], map: "FK_userPayment_PaymentType")
  @@index([personId], map: "FK_userPayment_Person")
}

model orderdetails {
  id             Int              @id @default(autoincrement())
  personId       Int
  total          Decimal          @db.Decimal(10, 2)
  paymentId      Int
  createdAt      DateTime         @default(now()) @db.Timestamp(0)
  updatedAt      DateTime         @default(now()) @db.Timestamp(0)
  person         person           @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orderDetails_Person")
  orderitems     orderitems[]
  paymentdetails paymentdetails[]

  @@index([personId], map: "FK_orderDetails_Person")
}

model paymentdetails {
  id            Int          @id @default(autoincrement())
  oderId        Int
  paymentTypeId Int
  createdAt     DateTime     @default(now()) @db.Timestamp(0)
  updatedAt     DateTime     @default(now()) @db.Timestamp(0)
  orderdetails  orderdetails @relation(fields: [oderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_paymentDetails_OrderDetails")
  paymenttype   paymenttype  @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_paymentDetails_PaymentType")

  @@index([oderId], map: "FK_paymentDetails_OrderDetails")
  @@index([paymentTypeId], map: "FK_paymentDetails_PaymentType")
}

model orderitems {
  id           Int          @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     String       @default("0") @db.VarChar(255)
  createdAt    DateTime     @default(now()) @db.Timestamp(0)
  updatedAt    DateTime     @default(now()) @db.Timestamp(0)
  orderdetails orderdetails @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orderItems_OrderDetails")
  product      Product      @relation("orderitemsToproduct", fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_orderItems_Product")

  @@index([orderId], map: "FK_orderItems_OrderDetails")
  @@index([productId], map: "FK_orderItems_Product")
}

model contacts {
  id        Int      @id @default(autoincrement())
  personId  Int
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  phone     String   @db.VarChar(255)
  message   String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0)
  person    person   @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_contacts_Person")

  @@index([personId], map: "FK_contacts_Person")
}

model passwordrecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_recoveries_users")

  @@index([userId], map: "FK_password_recoveries_users")
}
